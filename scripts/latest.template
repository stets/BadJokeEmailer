{
    "Resources": {
        "badjokeEmailer": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "LambdaSNS",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Runtime": "python3.6",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaSNS",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "from botocore.vendored import requests\n",
                                "import boto3\n",
                                "import json\n",
                                "\n",
                                "# Lambda function to request Chuck Norris jokes and then publish them to an SES feed\n",
                                "\n",
                                "# set up sns client\n",
                                "client = boto3.client('sns')\n",
                                "\n",
                                "def lambda_handler(event, context):\n",
                                "    # fire a request off at the Chuck Norris API and format it\n",
                                "    joke = requests.get('https://api.chucknorris.io/jokes/random', headers={'Content-Type': 'application/json'}).json()['value']\n",
                                "    data = json.dumps(joke)\n",
                                "    # put the topic ARN in a variable\n",
                                "    topic_arn = ''\n",
                                "    # publish the joke to the topic\n",
                                "    client.publish(Message=joke, TopicArn=topic_arn)\n",
                                "    # return the joke for debug purposes\n",
                                "    return joke\n"
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "46b71565-97fe-4be0-b33b-b2fb35b47b29"
                }
            }
        },
        "subscriber": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "LambdaSNS",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Runtime": "python3.6",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaSNS",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "import boto3\n",
                                "\n",
                                "# simple script to receive API POST requests and add users to SES subscribers within AWS\n",
                                "# setup the SNS connection\n",
                                "client = boto3.client('sns')\n",
                                "topic_arn = ''\n",
                                "\n",
                                "def lambda_handler(event, context):\n",
                                "    # grab email and API resource path\n",
                                "    email = event['body-json']['email']\n",
                                "    resourcePath = event['context']['resource-path']\n",
                                "\n",
                                "    # check resource and subscribe/unsubscribe the user based on it\n",
                                "    if resourcePath == '/subscribe':\n",
                                "        # add the email to the SNS topic specified by ARN\n",
                                "        client.subscribe(TopicArn=topic_arn, Protocol='email', Endpoint=email)\n",
                                "        return 'Hey there, your email'  + email + ' is now subscribed to bad jokes!'\n",
                                "    elif resourcePath == '/unsubscribe':\n",
                                "\n",
                                "        a = client.list_subscriptions()\n",
                                "        print a \n",
                                "        for each in a['Subscriptions']:\n",
                                "            print each['Endpoint']\n",
                                "            if email == each['Endpoint']:\n",
                                "                client.unsubscribe(SubscriptionArn=each['SubscriptionArn'])\n",
                                "\n",
                                "        # remove the email to the SNS topic specified by ARN\n",
                                "        return 'Sorry to hear that you didn't like our awesome jokes, we are now unsubscribing: ' + email, a\n"
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fd9b4561-0852-4d7f-8706-832fedf09ba7"
                }
            }
        },
        "LambdaSNS": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2f532efb-b5da-4cea-a1d6-7225a879cd26"
                }
            }
        },
        "SNSFullAccess": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sns:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "LambdaSNS"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "44b2c081-2f23-4d15-9cc9-5c8108a9a06f"
                }
            }
        },
        "AGRA1GLIS": {
            "Type": "AWS::ApiGateway::RestApi",
            "DependsOn": "subscriber",
            "Properties": {
                "Body": {
                    "swagger": "2.0",
                    "info": {
                        "version": "2018-06-15T23:44:42Z",
                        "title": "subscribe"
                    },
                    "host": "ekd7290bj4.execute-api.us-east-1.amazonaws.com",
                    "basePath": "/dev",
                    "schemes": [
                        "https"
                    ],
                    "paths": {
                        "/": {
                            "post": {
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "uri": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path/2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "subscriber",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws"
                                }
                            }
                        },
                        "/subscribe": {
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "uri": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path/2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "subscriber",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws"
                                }
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/unsubscribe": {
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "uri": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path/2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "subscriber",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                                    },
                                    "passthroughBehavior": "when_no_templates",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws"
                                }
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        }
                    },
                    "definitions": {
                        "Empty": {
                            "type": "object",
                            "title": "Empty Schema"
                        }
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ca023c86-f2e7-419c-8d20-5c6aacc1fc57"
                }
            }
        },
        "AGD2OL80": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": "AGRA1GLIS",
            "Properties": {
                "RestApiId": {
                    "Ref": "AGRA1GLIS"
                },
                "StageName": "dev"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "61573b45-9a91-4fa3-91bb-10ba86b7d44f"
                }
            }
        },
        "LambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": 
                {"Version": "2012-10-17", 
                "Statement": [
                    {
                        "Effect": "Allow", 
                        "Action" : "sts:AssumeRole",
                        "Principal": {
                            "Service":"lambda.amazonaws.com"
                        }
                    }]
            }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8f59b3a3-cae6-4dd7-a76d-bcc407dba307"
                }
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "ca023c86-f2e7-419c-8d20-5c6aacc1fc57": {
                "size": {
                    "width": 150,
                    "height": 150
                },
                "position": {
                    "x": 150,
                    "y": 40
                },
                "z": 1,
                "embeds": [
                    "61573b45-9a91-4fa3-91bb-10ba86b7d44f"
                ]
            },
            "2f532efb-b5da-4cea-a1d6-7225a879cd26": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 270,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "44b2c081-2f23-4d15-9cc9-5c8108a9a06f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 270,
                    "y": 310
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "2f532efb-b5da-4cea-a1d6-7225a879cd26"
                ]
            },
            "fd9b4561-0852-4d7f-8706-832fedf09ba7": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 410,
                    "y": 110
                },
                "z": 1,
                "embeds": []
            },
            "46b71565-97fe-4be0-b33b-b2fb35b47b29": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 460,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "61573b45-9a91-4fa3-91bb-10ba86b7d44f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 190,
                    "y": 90
                },
                "z": 2,
                "parent": "ca023c86-f2e7-419c-8d20-5c6aacc1fc57",
                "embeds": [],
                "dependson": [
                    "fd9b4561-0852-4d7f-8706-832fedf09ba7",
                    "ca023c86-f2e7-419c-8d20-5c6aacc1fc57"
                ]
            },
            "8f59b3a3-cae6-4dd7-a76d-bcc407dba307": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 80,
                    "y": 80
                },
                "z": 0,
                "embeds": []
            }
        }
    }
}